# db.help() : show all the commands

# use database_name  : create new database and use existing database,

# show dbs : show all the databases;

# db : show the name of current database;

#db.dropDatabase() : remove the drop;


/////////////////////////////////////////////////////////////////////////////////////////////
sdnfbndsf

# db.collection_name.help() : show helpful command for  collection.

# db.createCollection("collection_name") : create the collection;

# show collections : show all the collections of the current database;

# db.database_name.renameCollection("new_name"): rename the collection name;

# db.collection_name.drop() : remove the collection;



//////////////////////////////////////Insert data in collection///////////////////////////////////

# db.col_name.insertOne({}) : add  single document;

# db.col_name.insertMany([]) : add multiple documents;


//////////////////////////////////////validation on the schema ////////////////////////////////////

db.createCollection("students"{
    validator:{
        $jsonSchema:{
            title : "Student object validation",
            required : ["name","age","course"],
            properties : {
                name: {
                    bsonType : "string",
                    description : "Name muse be string and required"
                },
                age: {
                    bsonType : "int",
                    minimum : 5,
                    maximum : 20,
                    description : "age must be number and required"
                },
                course: {
                    bsonType : "int",
                     enum : ["CS","SE"]
                    description : "COURSE MUST BE FROM "CS","SE" "
                },
            }
        }
    }
})


==> MODIFY AN EXISTING COLLECTION SCHEMA

db.runCommand({
    collMod : "collection_name",
    validator :{
        $jsonSchema:{
            required:["name","age"],
            properties:{
                name:{
                    bsonType:"String"
                    description:"Name must be string and is required"
                },

            }
        }
    }
})



///////////////////////// update and replace ///////////////////////////////////



# upateOne() : upate one document first document;

    db.collection_name.updateOne(
        {field : "Value"}, ----> filter
        {$set: {updated_field:"new_value"}-->update
        })



# updateMany() : update many

 db.collection_name.updateMany(
        {field : "Value"},
        {$set: {updated_field:"new_value"}}
        )


# Operator
1 : $unset : Removes the field from the document. 
2 : $rename :  Rename the field.
3 : $inc : Increament the field value 
4 : $mul : multiples the field value
5 : $currentDate  : sets the field value to the current date.


#Update Array Operator


1 : $push : adds an element to an array.
2 : $pop  : remove the first and last element of the array.
3 : $pull : premoves all the elements from an array the match the query.
4 : $addToSet : Add unique elements to an array.



/////////////// delete the data //////////////



# db.collection_name.deleteOne({field:"value"})

# db.collection_name.deleteMany({field:"value"})

# db.collection_name.deleteMany({}) : delete all collection.



///////////////// find document ///////////////////



# d.collection_name.find({field:"value"})

# d.collection_name.find()

# d.collection_name.findOne({field:"value"})

# db.collection_name.find(
    {field:"Value"}, ------> query
    {field1:1,field2:0} ----> projection
 )


===> count

# db.collection_name.find().count() : number of count.

===> Order

# db.collection_name.find().sort({field2:1}) : [As: 1 Des : -1]

===> LIMIT

# db.collection_name.find().limit(3) 

# db.collection_name.find().limit(3).skip(3) [skip the element 4 5 6]

 